@page "/inicio/overview/{id?}"
@using global::Services.Gestion
@using Microsoft.AspNetCore.WebUtilities
@using BlazorFrontend.Pages.Gestiones
@using BlazorFrontend.Pages.Gestiones.Editar
@using BlazorFrontend.Pages.Gestiones.Eliminar
@using Microsoft.AspNetCore.Http.Extensions
@using Modelos.Models.Enums
@using DialogOptions = MudBlazor.DialogOptions
@using Size = MudBlazor.Size
@inject GestionServices GestionServices
@inject NavigationManager NavigationManager
@layout DashboardLayout
@inject IDialogService DialogService

<h3>Lista de gestiones activas</h3>
<MudDataGrid T="GestionDto"
             Items="@_gestiones.Take(2)"
             Hover="@true"
             Readonly="@false"
             EditMode="DataGridEditMode.Form"
             Bordered="@true"
             EditTrigger="DataGridEditTrigger.Manual">
    <Columns>
        <PropertyColumn Property="@(i => i.Nombre)"/>
        <PropertyColumn Property="@(i => i.FechaInicio)" Title="Fecha de inicio"/>
        <PropertyColumn Property="@(i => i.FechaFin)" Title="Fecha de cierre"/>
        <PropertyColumn Property="@(i => i.Estado)"/>
        <TemplateColumn CellClass="d-flex justify-center">
            <CellTemplate>
                <MudIconButton Class="pa-1"
                        Color="Color.Warning"
                        Size="Size.Small"
                        Icon="@Icons.Material.Outlined.Edit"
                        OnClick="() => EditarGestion(context.Item)"/>
                <MudIconButton Class="pa-1"
                               Color="Color.Error"
                               Size="Size.Small"
                               Icon="@Icons.Material.Outlined.Delete"
                               OnClick="() => BorrarGestion(context.Item)"/>
                <MudIconButton Class="pa-1"
                               Color="Color.Info"
                               Size="Size.Small"
                               Icon="@Icons.Material.Outlined.Timelapse"
                               OnClick="() => NavigateToPage(context.Item) "/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


<MudFab Class="ma-4" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add"
        @onclick="@ShowMudCrearGestionModal" Label="Agregar Gestion"/>

@code {
    private IEnumerable<GestionDto> _gestiones = new List<GestionDto>()
        .Where(x => x.Estado == EstadosGestion.Abierto);

    [Inject]
    ISnackbar Snackbar { get; set; } = null!;

    [Parameter]
    public int Id { get; set; }

    private readonly DialogOptions _options = new()
    {
        CloseOnEscapeKey = true,
        MaxWidth = MaxWidth.Small,
        FullWidth = true,
        DisableBackdropClick = true
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = new Uri(NavigationManager.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);
            if (query.TryGetValue("id", out var idValue))
            {
                Id = int.Parse(idValue!);
                _gestiones = await GestionServices.GetGestionAsync(Id);
                StateHasChanged();
            }
            else
            {
                throw new KeyNotFoundException("The 'id' parameter was not found in the query string.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while initializing the component: {ex}");
        }
    }

    private void ShowMudCrearGestionModal()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            DisableBackdropClick = true
        };
        var parameters = new DialogParameters
        {
            { "Id", Id },
        };
        DialogService.ShowAsync<CrearGestion>("Llene los datos de la gestion",
            parameters, options);
    }

    private void EditarGestion(GestionDto item)
    {

        var parameters = new DialogParameters
        {
            { "Id", item.IdGestion },
            { "GestionDto", item }

        };
        DialogService.ShowAsync<EditarGestion>("Editar gestion",
            parameters, _options);
    }

    private async Task BorrarGestion(GestionDto item)
    {
        var parameters = new DialogParameters
        {
            { "Id", item.IdGestion }
        };
        await DialogService.ShowAsync<EliminarGestion>("Editar gestion",
            parameters, _options);
    }
    private void NavigateToPage(GestionDto gestion)
    {
        if (gestion.IdGestion is not 0)
        {
            var uri = $"/overview/inicioperiodo/{gestion.IdGestion}";
            NavigationManager.NavigateTo(uri);
        }
        else
        {
            Snackbar.Add("Seleccione una empresa antes de continuar.", Severity.Info);
        }
    }}
    }

}