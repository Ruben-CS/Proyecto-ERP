@using BlazorFrontend.Services
@using ButtonType = MudBlazor.ButtonType
@inject EmpresaService EmpresaService
@inject HttpClient HttpClient
@inject ISnackbar Snackbar

<MudDialog Style="border-radius: 15px;">
    <DialogContent>
        <MudForm SelectedEmpresaId="@SelectedEmpresaId" @ref="_form" @bind-isValid="_success">
            <div class="row">
                <div class="col-md-6 mb-4">
                    <MudTextField @bind-Value="EmpresaDto.Nombre" Label="Nombre"/>
                </div>
                <div class="col-md-6 mb-4">
                    <MudTextField @bind-Value="EmpresaDto.Nit" Label="NIT"/>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-4">
                    <MudTextField @bind-Value="EmpresaDto.Sigla" Label="Sigla"/>
                </div>

                <div class="col-md-6 mb-4">
                    <MudTextField @bind-Value="EmpresaDto.Telefono"
                                  Label="Telefono"/>

                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-4">
                    <MudTextField @bind-Value="EmpresaDto.Direccion" Label="Direccion"/>
                </div>
                <div class="col-md-6 md-4">
                    <MudSelect @bind-Value="EmpresaDto.Niveles" Label="Niveles" HelperText="Seleccione el nivel de la empresa" Variant="Variant.Text">
                        @foreach (var item in _listaNiveles)
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </div>
            </div>
            <label>Correo</label>
            <MudTextField @bind-Value="EmpresaDto.Correo" InputType="InputType.Email"/>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text"
                   Color="Color.Dark"
                   OnClick="Cancel"
                   StartIcon="@Icons.Material.Rounded.Cancel"
                   Class="rounded-pill">
            Cancelar
        </MudButton>
        <MudButton Variant="Variant.Filled"
                   ButtonType="ButtonType.Submit"
                   Color="Color.Warning"
                   OnClick="EditarEmpresaAsync"
                   Class="rounded-pill"
                   StartIcon="@Icons.Material.Rounded.Edit">
            Guardar
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    private bool _success;

    private MudForm? _form;

    [Parameter]
    public int SelectedEmpresaId { get; set; }

    [Parameter]
    public EventCallback<EmpresaDto> OnEmpresaListChange { get; set; }


    private readonly List<int> _listaNiveles = Enumerable.Range(3, 5).ToList();

    private EmpresaDto? EmpresaDto { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (EmpresaService != null && SelectedEmpresaId != 0)
        {
            EmpresaDto = await EmpresaService.GetEmpresaByIdAsync(SelectedEmpresaId);
        }
    }

    private async Task EditarEmpresaAsync()
    {
        const string url = "https://localhost:44378/empresas";

        var response = await HttpClient.PutAsJsonAsync(url, EmpresaDto);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Empresa editada exitosamente", Severity.Success);
            await OnEmpresaListChange.InvokeAsync(EmpresaDto);
            MudDialog.Close(DialogResult.Ok(response));
        }
        else
        {
            Snackbar.Add("Se ha producido un error", Severity.Error);
        }
    }

    void Cancel() => MudDialog.Cancel();
}