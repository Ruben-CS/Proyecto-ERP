@using ButtonType = MudBlazor.ButtonType
@using global::Services.Periodo
@using Microsoft.IdentityModel.Tokens
@using Modelos.Models.Enums
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject PeriodoService PeriodoService

<MudDialog>
    <DialogContent>
        <EditForm Model="@PeriodoDto" OnValidSubmit="@ValidateAndEditPeriodo">
            <DataAnnotationsValidator/>
            <MudTextField @bind-Value="@PeriodoDto.Nombre" Label="Nombre" Required="true" RequiredError="Nombre es requerido">@PeriodoDto.Nombre</MudTextField>
            <MudStack Row="true">
                <MudDatePicker Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Editable="true" Label="Fecha de inicio" @bind-Date="@PeriodoDto.FechaInicio" Required="true" RequiredError="Fecha inicial requerida"/>
                <MudDatePicker Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Editable="true" Label="Fecha de cierre" @bind-Date="@PeriodoDto.FechaFin" Required="true" RequiredError="Fecha de cierre requerida"/>
            </MudStack>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Color="Color.Success" OnClick="@ValidateAndEditPeriodo">Editar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public PeriodoDto PeriodoDto { get; set; } = null!;

    [Parameter]
    public int IdGestion { get; set; }

    [Parameter]
    public int IdPeriodo { get; set; }

    void Cancel() => MudDialog!.Cancel();

    private IEnumerable<PeriodoDto> _periodoDtos = new List<PeriodoDto>();

    private Task ValidateAndEditPeriodo()
    {
        throw new NotImplementedException();
    }

    protected override async Task OnInitializedAsync()
    {
        _periodoDtos = await PeriodoService.GetPeriodosAsync(IdGestion);
        StateHasChanged();
    }

    private async Task<bool> ValidateUniqueNombre()
    {
        if (_periodoDtos.Any(periodo => periodo.Nombre == PeriodoDto.Nombre))
        {
            return await Task.FromResult(true);
        }
        return await Task.FromResult(false);
    }



    private async Task<bool> FechasNoSolapan()
    {
        var periodoActivo = _periodoDtos.Where(periodo =>
            periodo.IdGestion == IdGestion && periodo.IdPeriodo != IdPeriodo
            ).ToList();

        if (periodoActivo.IsNullOrEmpty())
        {
            return await Task.FromResult(false);
        }

        return await Task.FromResult(periodoActivo.Any(periodo =>
            PeriodoDto.FechaInicio >= periodo.FechaInicio &&
            PeriodoDto.FechaInicio <= periodo.FechaFin ||
            PeriodoDto.FechaFin >= periodo.FechaInicio &&
            PeriodoDto.FechaFin <= periodo.FechaFin
            ));
    }
}