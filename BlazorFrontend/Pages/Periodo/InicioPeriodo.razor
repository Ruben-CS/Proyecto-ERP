@page "/overview/inicioperiodo/{idgestion:int}"
@using global::Services.Gestion
@using global::Services.Periodo
@layout PeriodoDashboard
@inject GestionServices GestionServices
@inject PeriodoService PeriodoService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit"/>
    <MudSpacer/>
    <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End"/>

</MudAppBar>

<h3>Administracion del preiodo de gestion - @_gestionDto.Nombre </h3>

<MudDataGrid T="PeriodoDto"
             Items="@Periodos.Take(2)"
             Hover="@true"
             Readonly="@false"
             EditMode="DataGridEditMode.Form"
             Bordered="@true"
             EditTrigger="DataGridEditTrigger.Manual">
    <Columns>
        <PropertyColumn Property="@(i => i.Nombre)"/>
        <PropertyColumn Property="@(i => i.FechaInicio)" Title="Fecha de inicio"/>
        <PropertyColumn Property="@(i => i.FechaFin)" Title="Fecha de cierre"/>
        <PropertyColumn Property="@(i => i.Estado)"/>
        <TemplateColumn CellClass="d-flex justify-center">
            <CellTemplate>
                <MudIconButton Class="pa-1"
                        Color="Color.Warning"
                        Size="Size.Small"
                        Icon="@Icons.Material.Outlined.Edit"
                        OnClick="() => EditarPeriodo(context.Item)"/>
                <MudIconButton Class="pa-1"
                               Color="Color.Error"
                               Size="Size.Small"
                               Icon="@Icons.Material.Outlined.Delete"
                               OnClick="() => BorrarPeriodo(context.Item)"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


<MudFab Class="ma-4" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add"
        @onclick="@ShowMudCrearPeriodonModal" Label="Agregar Periodo"/>
@code {

    [Parameter]
    public int IdGestion { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; } = null!;

    public IEnumerable<PeriodoDto> Periodos = new List<PeriodoDto>();

    private GestionDto _gestionDto = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = new Uri(NavigationManager.Uri);
            var segments = uri.Segments;
            var idValue = segments[^1];
            if (!string.IsNullOrEmpty(idValue) && int.TryParse(idValue, out var id))
            {
                _gestionDto = await GestionServices.GetGestionSingleAsync(id);
                Periodos = await PeriodoService.GetPeriodosAsync(IdGestion);
            }
            else
            {
                throw new ArgumentException("The 'idgestion' parameter is missing or invalid.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while initializing the component: {ex}");
        }
    }

    private Task EditarPeriodo(object contextItem)
    {
        throw new NotImplementedException();
    }

    private Task BorrarPeriodo(object contextItem)
    {
        throw new NotImplementedException();
    }

    private Task ShowMudCrearPeriodonModal()
    {
        throw new NotImplementedException();
    }

}