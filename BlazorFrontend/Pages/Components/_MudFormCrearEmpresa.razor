@using Severity = MudBlazor.Severity
@inject IDialogService DialogService
@inject HttpClient HttpClient

<EditForm Model="@Empresa" OnValidSubmit="UpsertEmpresa" On>
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="form-outline">
                <label>Nombre</label>
                <InputText @bind-Value="Empresa.Nombre" class="form-control"></InputText>
                <ValidationMessage For="@(() => Empresa.Nombre)"/>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="form-outline">
                <label>Nit</label>
                <InputText @bind-Value="Empresa.Nit" class="form-control"></InputText>
                <ValidationMessage For="@(() => Empresa.Nit)"/>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="form-outline">
                <label>Sigla</label>
                <InputText @bind-Value="Empresa.Sigla" class="form-control"></InputText>
                <ValidationMessage For="@(() => Empresa.Sigla)"/>
            </div>
        </div>

        <div class="col-md-6 mb-4">
            <div class="form-outline">
                <label>Telefono</label>
                <InputText @bind-Value="Empresa.Telefono" class="form-control"></InputText>
                <ValidationMessage For="@(() => Empresa.Telefono)"/>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="form-outline">
                <label>Direccion</label>
                <InputText @bind-Value="Empresa.Direccion" class="form-control"></InputText>
                <ValidationMessage For="@(() => Empresa.Direccion)"/>
            </div>
        </div>
        <div class="col-md-6 md-4">
            <div class="form-outline">
                <label>Niveles</label>
                <InputSelect @bind-Value="Empresa.Niveles" class="form-select" aria-label="Default select example">
                    @foreach (var item in _listaNiveles)
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Empresa.Niveles)"/>
            </div>
        </div>
    </div>
    <label>Correo</label>
    <InputText @bind-Value="Empresa.Correo" class="form-control"></InputText>
    <ValidationMessage For="@(() => Empresa.Correo)"/>
</EditForm>
<FooterTemplate>
    <Button Color="ButtonColor.Primary" @onclick="UpsertEmpresa">Crear</Button>
</FooterTemplate>

@code {

    [Inject]
    ISnackbar Snackbar { get; set; } = null!;
    private EmpresaDto Empresa { get; } = new();
    private readonly List<int> _listaNiveles = Enumerable.Range(3, 5).ToList();
    private DialogReference _mudCrearEmpresaModal = null!;

    private async Task UpsertEmpresa()
    {
        const string url = "https://localhost:44378/empresas/agregarempresa";

        var empresaDto = new EmpresaDto
        {
            Nombre = Empresa.Nombre,
            Nit = Empresa.Nit,
            Sigla = Empresa.Sigla,
            Telefono = Empresa.Telefono,
            Correo = Empresa.Correo,
            Direccion = Empresa.Direccion,
            Niveles = Empresa.Niveles,
            IdUsuario = 1
        };

        var response = await HttpClient.PostAsJsonAsync(url, empresaDto);


        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Empresa editada exitosamente", Severity.Success);
        }
        else
        {
            Snackbar.Add("Debe llenar los datos requeridos", Severity.Error);
        }
    }
}