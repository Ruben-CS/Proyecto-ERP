@using BlazorFrontend.Services
@inject NavigationManager NavigationManager
@inject EmpresaService EmpresaService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudAppBar Elevation="5" Dense="false">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit"
                   Edge="Edge.Start"
                   OnClick="@ToggleDrawer"/>
    <MudSpacer/>
        <MudMenu Icon="@Icons.Material.Filled.AccountCircle"
                 Color="Color.Inherit"
                 Size="Size.Large"
                 Edge="Edge.End"
                 AnchorOrigin="Origin.BottomLeft"
                 TransformOrigin="Origin.TopRight">
            <MudText Typo="Typo.subtitle2" Align="Align.Center"
                     GutterBottom="true">
                @Username
            </MudText>
            <MudMenuItem IconSize="Size.Small"
                         IconColor="Color.Dark"
                         Icon="@Icons.Material.Filled.Logout"
                         OnClick="CerrarSesion">
                Cerrar Sesion
            </MudMenuItem>
        </MudMenu>
</MudAppBar>

<MudDrawer @bind-Open="@_open"
           ClipMode="DrawerClipMode.Docked"
           Elevation="1"
           Variant="@DrawerVariant.Responsive"
           PreserveOpenState="true"
           Breakpoint="Breakpoint.Md"
           OpenMiniOnHover="true">
    <MudDrawerHeader>
        <MudText Typo="@Typo.h6"
                 Class="ml-5"
                 Align="Align.Left">
            @NombreEmpresa
        </MudText>
    </MudDrawerHeader>
    <MudNavMenu Rounded="true"
                Color="Color.Tertiary"
                Bordered="true">
        <MudNavGroup Icon="@Icons.Material.Filled.Business"
                     Title="Contabilidad"
                     Expanded="true">

            <MudNavLink Icon="@Icons.Material.Filled.CalendarMonth"
                        OnClick="NavigateToGestiones">
                Gestiones
            </MudNavLink>

            <MudNavLink Icon="@Icons.Material.Filled.AccountBalance"
                        OnClick="NavigateToCuentas">
                Plan de Cuentas
            </MudNavLink>

            <MudNavLink Icon="@Icons.Material.Filled.ReceiptLong"
                        OnClick="NavigateToComprobantes">
                Comprobantes
            </MudNavLink>

            <MudNavLink Icon="@Icons.Material.Filled.SwapHorizontalCircle"
                        OnClick="CambiarEmpresa">
                Cambiar empresa
            </MudNavLink>
        </MudNavGroup>
    </MudNavMenu>
    <MudNavMenu Color="Color.Info" Bordered="true" Rounded="true">
        <MudNavGroup Icon="@Icons.Material.Filled.Settings"
                     Title="Configuracion"
                     Expanded="true">
            <MudNavLink Icon="@Icons.Material.Filled.CurrencyExchange"
                        OnClick="NavigateToMonedas">
                Monedas
            </MudNavLink>
        </MudNavGroup>
    </MudNavMenu>
</MudDrawer>

@if (IsLoggingOut)
{
    <MudOverlay Visible="IsLoggingOut" DarkBackground="true" Absolute="false" ZIndex="9999">
        <MudProgressCircular Color="Color.Info" Indeterminate="true"/>
    </MudOverlay>
}

@code {

    [Parameter]
    public int IdEmpresa { get; set; }

    private string? NombreEmpresa { get; set; }

    private bool IsLoggingOut { get; set; }

    private string? Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var empresa = await EmpresaService.GetEmpresaByIdAsync(IdEmpresa);
        NombreEmpresa = empresa!.Nombre;
        await InvokeAsync(StateHasChanged);
    }

    private bool _open = true;
    private void ToggleDrawer() => _open = !_open;
    private void CambiarEmpresa() => NavigationManager.NavigateTo("/inicio");

    private void NavigateToCuentas()
    {
        if (IdEmpresa is 0)
            return;
        var uri = $"/plandecuentas/overview/{IdEmpresa}";
        NavigationManager.NavigateTo(uri);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Username = await LocalStorage.GetItemAsync<string>("username");
            StateHasChanged();
        }
    }


    private void NavigateToGestiones()
    {
        if (IdEmpresa is 0)
            return;
        var uri = $"/gestion/overview/{IdEmpresa}";
        NavigationManager.NavigateTo(uri);
    }


    private void NavigateToMonedas()
    {
        if (IdEmpresa is 0)
            return;
        var uri = $"/inicio/configuracion/monedaDashboard/{IdEmpresa}";
        NavigationManager.NavigateTo(uri);
    }

    private void NavigateToComprobantes()
    {
        var uri = $"/comprobantes/overview/{IdEmpresa}";
        NavigationManager.NavigateTo(uri);
    }

    private async Task CerrarSesion()
    {
        IsLoggingOut = true;
        await Task.Delay(2500);
        NavigationManager!.NavigateTo("/");
        IsLoggingOut = false;
    }
}