@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@layout LoginLayout
@using ModuloContabilidadApi.Models.Dtos
@inject ISnackbar Snackbar

<MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
    <EditForm Model="RequestDto" OnValidSubmit="LoginAsync">
        <div class="form-group">
            <MudTextField @bind-Value="RequestDto.Nombre" id="usuario" Label="Usuario" Variant="Variant.Filled"/>
        </div>

        <div class="form-group">
            <MudTextField @bind-Value="RequestDto.Password" InputType="InputType.Password" Label="Contraseña" Variant="Variant.Filled"/>
        </div>

        <div class="form-group p-4 shadow-sm text-center">
            <Button Color="ButtonColor.Success" @onclick="() => ShowMessage(ToastType.Success)" Type="BlazorBootstrap.ButtonType.Submit">
                Iniciar Sesión
            </Button>
        </div>
    </EditForm>
</MudStack>

@code {
    public LoginRequestDto RequestDto { get; } = new();
    private bool _showInvalidCredentials;
        public const string LoginUrl = "https://localhost:44378/Auth/login";

    List<ToastMessage> messages = new();

    private void ShowMessage(ToastType toastType)
    {
        messages.Add(CreateToastMessage(toastType));
    }

    private ToastMessage CreateToastMessage(ToastType toastType)
    {
        return new ToastMessage
        {
            Type = toastType,
            Message = $"Bienvenido: {RequestDto.Nombre} !",
        };
    }

    private async Task LoginAsync()
    {
        var loginRequestDto = new LoginRequestDto
        {
            Nombre = RequestDto.Nombre,
            Password = RequestDto.Password
        };

        var response = await HttpClient.PostAsJsonAsync(LoginUrl, loginRequestDto);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Bienvenido {loginRequestDto.Nombre}!", Severity.Success);
            NavigationManager.NavigateTo("/Inicio");
        }
        else
        {
            Snackbar.Add($"Credenciales incorrectas", Severity.Error);
            _showInvalidCredentials = true;
        }
    }

}