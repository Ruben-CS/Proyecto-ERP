@page "/inicio"
@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components
@using Modelos.Models
@using System.ComponentModel.DataAnnotations

@if (IsSucces)
{
    <Toasts class="p-3" Messages="_messages" Placement="ToastsPlacement.TopRight" AutoHide="true" Delay="4000"/>
}

@* Crear Empresa *@
<Modal @ref="_modal" title="Llenar el formulario" UseStaticBackdrop="true"
       IsVerticallyCentered="true">
    <BodyTemplate>
        <EditForm Model="@Empresa" OnValidSubmit="UpsertEmpresa" On>
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="form-outline">
                        <label>Nombre</label>
                        <InputText @bind-Value="Empresa.Nombre" class="form-control"></InputText>
                        <ValidationMessage For="@(() => Empresa.Nombre)"/>
                    </div>
                </div>
                <div class="col-md-6 mb-4">
                    <div class="form-outline">
                        <label>Nit</label>
                        <InputText @bind-Value="Empresa.Nit" class="form-control"></InputText>
                        <ValidationMessage For="@(() => Empresa.Nit)"/>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="form-outline">
                        <label>Sigla</label>
                        <InputText @bind-Value="Empresa.Sigla" class="form-control"></InputText>
                        <ValidationMessage For="@(() => Empresa.Sigla)"/>
                    </div>
                </div>

                <div class="col-md-6 mb-4">
                    <div class="form-outline">
                        <label>Telefono</label>
                        <InputText @bind-Value="Empresa.Telefono" class="form-control"></InputText>
                        <ValidationMessage For="@(() => Empresa.Telefono)"/>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="form-outline">
                        <label>Direccion</label>
                        <InputText @bind-Value="Empresa.Direccion" class="form-control"></InputText>
                        <ValidationMessage For="@(() => Empresa.Direccion)"/>
                    </div>
                </div>
                <div class="col-md-6 md-4">
                    <div class="form-outline">
                        <label>Niveles</label>
                        <InputSelect @bind-Value="Empresa.Niveles" class="form-select" aria-label="Default select example">
                            @foreach (var item in _listaNiveles)
                            {
                                <option value="@item">@item</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Empresa.Niveles)"/>
                    </div>
                </div>
            </div>
            <label>Correo</label>
            <InputText @bind-Value="Empresa.Correo" class="form-control"></InputText>
            <ValidationMessage For="@(() => Empresa.Correo)"/>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideCrearEmpresa">Cerrar</Button>
        <Button Color="ButtonColor.Primary" @onclick="UpsertEmpresa">Crear</Button>
    </FooterTemplate>
</Modal>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Class="d-flex pa-4 ma-5" Elevation="0">
        I'm a flexbox container.
    </MudPaper>
    <MudPaper Class="d-flex pa-4" Elevation="0">
        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Add"
                @onclick="@ShowCrearEmpresa" Label="Agregar Empresa"/>
    </MudPaper>
</MudContainer>

<MudGrid Class="ma-2 pa-4">
    <MudItem xs="12">
        <MudSelect T="string" Label="Empresa" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="string.Empty"/>
            <MudSelectItem Value="string.Empty"/>
            <MudSelectItem Value="string.Empty"/>
            <MudSelectItem Value="string.Empty"/>
        </MudSelect>
    </MudItem>
    <MudItem xs="4">
        <MudFab Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit"
                Class="d-flex align-center
        justify-center
        mud-width-full py-8"
                Label="Editar Empresa"/>
    </MudItem>
    <MudItem xs="4">
        <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                Class="d-flex align-center
                justify-center
                mud-width-full py-8"
                Label="Eliminar Empresa"/>
    </MudItem>
    <MudItem xs="4">
        <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Login"
                Class="d-flex align-center
                justify-center
                mud-width-full py-8"
                Label="Ingresar"/>
    </MudItem>
</MudGrid>

@code {

    private Empresa Empresa { get; } = new();


    [Inject]
    protected ToastService ToastService { get; set; }

    private Modal _modal = new();
    private readonly List<int> _listaNiveles = Enumerable.Range(3, 5).ToList();
    readonly List<ToastMessage> _messages = new();
    private bool IsSucces { get; set; }

    private void ShowMessage(ToastType toastType) => _messages.Add(CreateToastMessage(toastType));

    private ToastMessage CreateToastMessage(ToastType toastType)
        => new()
        {
            Type = toastType,
            Message = $"Empresa creade exitosamente el: {DateTime.Now}",
        };

    private async Task ShowCrearEmpresa()
    {
        await _modal.ShowAsync();
    }

    private async Task HideCrearEmpresa()
    {
        await _modal.HideAsync();
    }

    private async Task UpsertEmpresa()
    {
        const string url = "https://localhost:44378/empresas/agregarempresa";

        var empresaDto = new EmpresaDto
        {
            Nombre = Empresa.Nombre,
            Nit = Empresa.Nit,
            Sigla = Empresa.Sigla,
            Telefono = Empresa.Telefono,
            Correo = Empresa.Correo,
            Direccion = Empresa.Direccion,
            Niveles = Empresa.Niveles,
            IdUsuario = 1
        };

        var response = await HttpClient.PostAsJsonAsync(url, empresaDto);


        if (response.IsSuccessStatusCode)
        {
            await HideCrearEmpresa();
            ShowMessage(ToastType.Success);
            IsSucces = true;
        }
    }

}